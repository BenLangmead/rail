"""
geuvadis_lab_ethnicity_sex.py

Reads a CSV version of
ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/working/
20130606_sample_info/20130606_sample_info.xlsx and 
http://www.ebi.ac.uk/arrayexpress/files/E-GEUV-3/E-GEUV-3.sdrf.txt
to determine sample metadata for all of GEUVADIS manifest
(GEUVADIS_all_samples.manifest). Outputs random samples of paired-end
GEUVADIS samples -- comment lines provide metadata. Some data are missing
from http://www.ebi.ac.uk/arrayexpress/files/E-GEUV-1/E-GEUV-1.sdrf.txt

Make the eval directory the current working directory before executing.

Default values of command-line parameters were used for Rail simulation.
"""
import argparse
import sys
import random
from collections import defaultdict

# Print file's docstring if -h is invoked
parser = argparse.ArgumentParser(description=__doc__, 
            formatter_class=argparse.RawDescriptionHelpFormatter)
# Add command-line arguments
parser.add_argument('--seed', type=int,
        default=0,
        help='Random seed to use'
    )
parser.add_argument('--out', type=str,
        default='GEUVADIS',
        help='Output filename'
    )

args = parser.parse_args()

fastq_to_sample = {}
sample_to_metadata = {}
fastq_to_lab = {}

# Excludes come from http://geuvadiswiki.crg.es/index.php/QC_sample_info
exclude_list = ['NA18861.4.M_120208_5', 'NA19225.6.M_120119_5',
                    'NA12399.7.M_120219_1', 'NA07000.1.M_120209_2',
                    'HG00237.4.M_120208_1', 'NA19095.5.M_120131_5',
                    'NA19144.4.M_120208_2']

with open('20130606_sample_info/Sample Info-Table 1.csv') \
    as sample_to_metadata_stream:
    line = sample_to_metadata_stream.readline()
    line = sample_to_metadata_stream.readline()
    while line:
        tokens = line.strip().split(',')
        if 'female' in tokens:
            sex = 'female'
        else:
            assert 'male' in tokens
            sex = 'male'
        sample_to_metadata[tokens[0]] = (sex, tokens[2]) #sex, hapmap pop
        line = sample_to_metadata_stream.readline()

with open('E-GEUV-3.sdrf.txt') as geuvadis_data_stream:
    geuvadis_data_stream.readline() # labels
    for line in geuvadis_data_stream:
        skip = False
        for sample in exclude_list:
            if sample in line:
                skip = True
                break
        if skip: continue
        tokens = line.strip().split('\t')
        fastq_to_sample[tokens[29].rpartition('/')[-1].partition('_')[0]] = \
            tokens[0]
        fastq_to_lab[tokens[29].rpartition('/')[-1].partition('_')[0]] = \
            (tokens[22], tokens[-1])

manifest_line_to_metadata = {}

with open('GEUVADIS_all_samples.manifest') as geuvadis_stream:
    for line in geuvadis_stream:
        if line[0] == '#' or not line.strip(): # comment line
            continue
        tokens = line.strip().split('\t')
        if len(tokens) != 5: continue # paired-end lines only
        fastq_name = tokens[0].rpartition('/')[-1].partition('_')[0]
        if fastq_name not in fastq_to_sample: continue
        manifest_line_to_metadata[line] = (fastq_to_sample[fastq_name],) + \
            sample_to_metadata[fastq_to_sample[fastq_name]] + \
            fastq_to_lab[fastq_name]

from collections import defaultdict
lab_to_manifest_lines = defaultdict(list)
for line in manifest_line_to_metadata:
    lab_to_manifest_lines[manifest_line_to_metadata[line][-1]].append(line)

random.seed(args.seed)
lines_16 = []
lines_8 = []
lines_4 = []
for lab in lab_to_manifest_lines:
    to_add = random.sample(lab_to_manifest_lines[lab], 16)
    lines_16 += to_add
    to_add = random.sample(to_add, 8)
    lines_8 += to_add
    to_add = random.sample(to_add, 4)
    lines_4 += to_add

def write_output(out, count_per_lab, lines):
    replicate_numbers = defaultdict(int)
    with open(out, 'w') as geuvadis_stream:
        print >>geuvadis_stream, '# %d FASTQ pairs of all of GEUVADIS' % (
                count_per_lab * 7
            )
        print >>geuvadis_stream, (
                '# %d are selected at random from each lab'
            ) % count_per_lab
        print >>geuvadis_stream, \
            '# Generated by geuvadis_lab_ethnicity_sex_metadata.py from: '
        print >>geuvadis_stream, ('# 1. ftp://ftp.1000genomes.ebi.ac.uk/'
                'vol1/ftp/technical/working/'
                '20130606_sample_info/20130606_sample_info.xlsx, which '
                'provides metadata on 1000 Genomes samples')
        print >>geuvadis_stream, ('# 2. http://www.ebi.ac.uk/arrayexpress/'
                'files/E-GEUV-3/E-GEUV-3.sdrf.txt, which provides metadata '
                'about each GEUVADIS fastq'
            )
        print >>geuvadis_stream, ('# 3. GEUVADIS_all_samples.manifest, a '
               'Myrna-style manifest file listing all GEUVADIS samples.\n')
        for line in lines:
            tokens = line.strip().split('\t')
            replicate_numbers[manifest_line_to_metadata[line][:-2]] += 1
            tokens[-1] = '_'.join(manifest_line_to_metadata[line]) \
                + '-1-%d' % (
                    replicate_numbers[manifest_line_to_metadata[line][:-2]]
                )
            print >>geuvadis_stream, '\t'.join(tokens)

write_output(args.out + '_' + str(16 * 7) + '.manifest', 16, lines_16)
write_output(args.out + '_' + str(8 * 7) + '.manifest', 8, lines_8)
write_output(args.out + '_' + str(4 * 7) + '.manifest', 4, lines_4)
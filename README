

Simulation tutorial

Arguments that need to be specified by simulate.py
    --fasta                Path to reference genome
    --chrsizes             The sizes of each chromosome
    --output-prefix        Prefix for output read files
    --output-annotations   Prefix for simulated transcripts
    --read-len             Read length to simulate
    --num-replicates       Number of replicates per group
    --seed                 Pseudo-random seed
    --num-nucs             Number of total nucleotides of reads to generate
    --num-xscripts         Number of transcripts to simulate
    --stranded             Indicates if boths strands need to be simulated
    --alternative-spliced  Indicates if alternatively spliced transcripts should be simulated
    --paired-end           Generate paired-end reads
    --fragment-mean        Mean of (gaussian) fragment distribution
    --fragment-sd          Standard deviation of (gaussian) fragment distribution
    --readmm_rate          The rate of mismatches
    --snp_rate             The rate of snps
    --indel_rate           The rate of inserts or deletions
    --canonical-sites      Only simulates reads spanning canonical sites
    --noncanonical-sites   Only simulates reads spanning noncanonical sites

Output files

The output-prefix option specifies the output directory of all of the simulation information.  
The simulation will output .tab files containing information about the read name, sequence and quality scores.
If --output-prefix=x and --num-replicates=z, the following files will be outputted by the simulation
 x.cov
 x.sites
 x.manifest
 x.variants
 x.xscripts
 x.groupy.repz.tab

where y = [0,1] and z = [0,num-replicates]

All of the *.tab files contain raw simulated reads from the simulation.

The x.cov file is a pickle file containing two vectors, which contain information about the start and ending positions of each simulated read.  This is required for validation.

The x.xscripts file contains all the annotated transcripts that have been simulated.  This file is required for validation.

The x.manifest file contains information about the simulated datasets and their corresponding normalization factors.

The x.variants file contains all of the simulated variants.  If --snp_rate=0 and --indel_rate=0, then this file will be empty.

Option details
  Both --fasta and --chrsizes option are required.  The --chrsizes option only requires the input file to have a tab delimited format of  
  [chromosome name] [chromosome length] [offset]
  If you have a .fai file, this can be used instead.

  The --alternative-splice method may be a little misleading.  Right now all it does is simulate one set of transcript isoforms generated by the same gene.
 
  The --canonical-sites and --noncanonical-sites options are still currently under active developement

Example of a simulation shell script 

DIR=$PWD
SIM=../../src/simulate
ANNOTATIONS=../drosophila/Drosophila_melanogaster/UCSC/dm3/Annotation/Genes/genes.gtf
GENOME=../drosophila/Drosophila_melanogaster/UCSC/dm3/Sequence/WholeGenomeFasta/genome.fa
DRIVERS=$DIR/../../drivers
FASTAIDX=../drosophila/Drosophila_melanogaster/UCSC/dm3/Sequence/WholeGenomeFasta/genome.fa.fai
ANNOT_SITES=fly.genes.gtf
python $SIM/splice_sim.py \ 
    --fasta=$GENOME \
    --gtf=$ANNOTATIONS \
    --output-prefix=$DIR/fly \
    --num-xscripts=10 \
    --num-nucs=1000000 \
    --alternative-spliced=0 \
    --stranded=1 \
    --readmm_rate=0.01 \
    --snp_rate=0 \
    --indel_rate=0 \
    --chrsizes=$FASTAIDX \
    --output-annotations=$ANNOT_SITES \
    --paired-end

Validation tutorial
   
Arguments that need to be specified by validate.py
   --refseq           Path to reference genome
   --xscripts-file    The path of the transcripts pickle file
   --sites-file       The path of the annotated splice sites pickle file
   --coverage-file    The path of the coverage pickle file
   --bed-file         Path of the estimated splice sites bed file
   --radius           The radius of tolerance for identifying splice site neighborhoods
   --window-radius    The radius of display window
   --refseq           The reference sequence
   --flank-seqs       The flanking sequences surrounding the intron
   --false-positives  Indicates if false positives are to be printed
   --false-negatives  Indicates if false positives are to be printed

Input files

The first four files listed in the validation options above are required.  Using the same file names from the simulation tutorial
--xscripts-file=x.xscripts
--sites-file=x.sites
--coverage-file=x.cov

The --bed-file option needs to specify the file that contains the output splice sites from the Myrna pipeline
The --flank-seqs option needs to specify the file that contains the flanking sequences bed file from the Mynra pipeline.  Note that this file only contains the intron lines in the align output in the Mynra pipeline.  This can be obtained by applying grep '^intron' to the align output file
The --radius option is used to differientiate between false positives and nearby.  All detected splice sites outside of the nearest annotated splice site are considered false positives.  By default, this is set to 10.  

example script

CHECK=../src/check
SIM_SPLICE=../example/sim_splice
XSCRIPTS=$SIM_SPLICE/fly.xscripts
BEDSITES=$SIM_SPLICE/intermediate/splice_sites.bed
TOPHAT_SITES=$SIM_SPLICE/tophat_out/tophat_sites.bed
SITES=$SIM_SPLICE/fly.sites
GENOME=../example/drosophila/Drosophila_melanogaster/UCSC/dm3/Sequence/WholeGenomeFasta/genome.fa
FLANKS=$SIM_SPLICE/intermediate/flanks.tab
COV=$SIM_SPLICE/fly.cov
cat $SIM_SPLICE/intermediate/align_out.tsv | grep intron > $FLANKS  

To only display false positives, add the following line to the script

python $CHECK/validate.py \
    --xscripts-file=$XSCRIPTS \
    --bed-file=$BEDSITES \
    --refseq=$GENOME \
    --sites-file=$SITES \
    --flank-seqs=$FLANKS \
    --coverage-file=$COV \
    --false-positives 

To only display false negatives, add the following line to the script instead

python $CHECK/validate.py \
    --xscripts-file=$XSCRIPTS \
    --bed-file=$BEDSITES \
    --refseq=$GENOME \
    --sites-file=$SITES \
    --flank-seqs=$FLANKS \
    --coverage-file=$COV \
    --false-negatives

If you wish to only view the hard statistics, add the following line to the script instead

python $CHECK/validate.py \
    --xscripts-file=$XSCRIPTS \
    --bed-file=$BEDSITES \
    --refseq=$GENOME \
    --sites-file=$SITES \
    --flank-seqs=$FLANKS \
    --coverage-file=$COV \
 
If you desire to view more of the region showing each splice site, you can enlargen the window radius.  The window radius is set to 50 bp by default, so the actual window size is 100bp long.

Note that there is a minor issue with the display.  At the moment, short introns aren't being displayed very well.  If a short intron is being displayed, then only one of the exons will be reported as an exon in each display.

Example

False positives False False negatives True
False negative ~ no flanking sequences
Region    chr2R:645178-645328
Site pos  chr2R:645253-645254
Annotated chr2R:645253-645254
Exon     TTTTAATCCTACGTGGCGAAAAACTTTTCCAAGTACCAAACAATTTAATTGTGGAGTCACAGAAAACAATGATG
Intron                                                                             GTATGTGTTATTCTTGAGTTTTTAATTAACCGTAAATATATATGTTTCCATAGGGTAAGAAAGGATGGCATCGGCAT
Site                                                                               **
Starts   000000000000000000001000000100000000000001000000000001000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000
Ends     000001010000000000000000100000001000001100000000000010000000000000000010011000000000000000000000000000000000000000000000000000000000000000000000000001
False negative ~ no flanking sequences
Region    chr2R:645178-645328
Site pos  chr2R:645253-645254
Annotated chr2R:645253-645254
Exon                                                                                                                                     GGTAAGAAAGGATGGCATCGGC
Intron   ATTTTAATCCTACGTGGCGAAAAACTTTTCCAAGTACCAAACAATTTAATTGTGGAGTCACAGAAAACAATGATGGTATGTGTTATTCTTGAGTTTTTAATTAACCGTAAATATATATGTTTCCATAG
Site                                                                                **
Starts   000000000000000000001000000100000000000001000000000001000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000
Ends     000001010000000000000000100000001000001100000000000010000000000000000010011000000000000000000000000000000000000000000000000000000000000000000000000001

In the above two scenarios, the intron is only a few dozen bp long, but each exon is reported separately.

When viewing the output from your validation script, it is strongly recommended to view everything in less

For instance, if your validation script is called validate.sh, run the following

sh validate | less


